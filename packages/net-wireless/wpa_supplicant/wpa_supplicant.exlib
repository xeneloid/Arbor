# Copyright 2009 Daniel Mierswa <impulze@impulze.org>
# Copyright 2010 Sterling X. Winter <replica@exherbo.org>
# Distributed under the terms of the GNU General Public License v2

if ever is_scm ; then
    SCM_REPOSITORY="git://w1.fi/srv/git/hostap.git"
    require scm-git
else
    DOWNLOADS="http://hostap.epitest.fi/releases/${PNV}.tar.gz"
fi

require qmake [ slot=5 ] gtk-icon-cache systemd-service
require option-renames [ renames=[ 'gnutls providers:gnutls' ] ]

export_exlib_phases src_prepare src_configure src_compile src_install

SUMMARY="Linux WPA/WPA2/IEEE 802.1X Supplicant"
DESCRIPTION="
wpa_supplicant is a WPA Supplicant for Linux, BSD, Mac OS X, and Windows with
support for WPA and WPA2 (IEEE 802.11i / RSN). It is suitable for both
desktop/laptop computers and embedded systems. Supplicant is the IEEE
802.1X/WPA component that is used in the client stations. It implements key
negotiation with a WPA Authenticator and it controls the roaming and IEEE
802.11 authentication/association of the wlan driver.

wpa_supplicant is designed to be a daemon program that runs in the background
and acts as the backend component controlling the wireless connection.
wpa_supplicant supports separate frontend programs and a text-based frontend
(wpa_cli) and a GUI (wpa_gui) are included with wpa_supplicant.
"
HOMEPAGE="http://hostap.epitest.fi/${PN}"

LICENCES="|| ( BSD-3 GPL-2 )"
SLOT="0"

MYOPTIONS="
    dbus     [[ description = [ Enable the DBus control interface ] ]]
    eap-fast [[
        description = [ Enable EAP-FAST authentication method ]
        requires = [ providers: -gnutls ]
    ]]
    nl80211  [[ description = [ Support the new 802.11 netlink interface ] ]]
    pcap     [[ description = [
        Use libdnet/libpcap for Layer 2 processing instead of Linux packet sockets
    ] ]]
    pcsc     [[ description = [
        Include GSM SIM/USIM interface for GSM/UMTS authentication algorithm (for EAP-SIM/EAP-AKA)
    ] ]]
    qt5      [[ description = [ Build the Qt-based wpa_gui program ] ]]
    ( providers: gnutls libressl openssl ) [[ number-selected = exactly-one ]]
"

# FIXME: Tests don't seem to get along with external crypto -- needs further
# investigation. Be sure to uncomment *all* test-related code below when this
# is resolved.
RESTRICT="test"

DEPENDENCIES="
    build:
        dbus? ( virtual/pkg-config )
        qt5? (
            x11-libs/qttools:5 [[ note = [ lrelease/lconvert for translations ] ]]
        )
    build+run:
        sys-libs/ncurses
        sys-libs/readline:=
        dbus? ( sys-apps/dbus )
        nl80211? ( net-libs/libnl:3.0 )
        pcap? (
            dev-libs/libdnet
            dev-libs/libpcap
        )
        pcsc? ( sys-apps/pcsc-lite )
        providers:gnutls? ( dev-libs/gnutls )
        providers:libressl? ( dev-libs/libressl:= )
        providers:openssl? ( dev-libs/openssl )
        qt5? (
            x11-libs/qtbase:5[gui]
            x11-libs/qtsvg:5
        )
"

if ever is_scm ; then
    DEPENDENCIES+="
        build:
            app-text/docbook-sgml-dtd:4.1
            app-text/docbook-utils
    "
fi

WORK=${WORKBASE}/${PNV}/${PN}

EQMAKE_SOURCES="wpa_gui.pro"

DEFAULT_SRC_COMPILE_PARAMS=(
    CC="${CC}"
    BINDIR=/usr/$(exhost --target)/bin
    INCDIR=/usr/$(exhost --target)/include
    LIBDIR=/usr/$(exhost --target)/lib
    V=1
)

DEFAULT_SRC_INSTALL_EXTRA_DOCS=( eap_testing.txt wpa_supplicant.conf )

# Enable CONFIG_* options
config_enable() {
    for config in ${@} ; do
        local str="CONFIG_${config}"
        [[ ${str} =~ = ]] || str="${str}=y"

        echo "echo \"${str}\" >> .config" 1>&2
        echo "${str}" >> .config || die
    done
}

# Enable CONFIG_DRIVER_* options
config_enable_driver() {
    for driver in ${@} ; do
        config_enable "DRIVER_${driver}"
    done
}

# Enable CONFIG_EAP_* options
config_enable_eap() {
    for eap in ${@} ; do
        config_enable "EAP_${eap}"
    done
}

wpa_supplicant_src_prepare() {
    edo pushd ${WORKBASE}/${PNV}
    default
    edo popd

    # FILES is a reserved exheres-0 variable
    ever is_scm && edo sed -i -e 's:FILES:DOC_FILES:g' doc/docbook/Makefile

    # Fix PCSC include dir
    edo sed -i -e "s:/usr/include/PCSC:/usr/$(exhost --target)/include/PCSC:g" Makefile
}

wpa_supplicant_src_configure() {
    config_enable \
        AP \
        BACKEND=file \
        CTRL_IFACE=unix \
        DEBUG_FILE \
        ELOOP=eloop \
        IBSS_RSN \
        IEEE80211N \
        IEEE80211R \
        IEEE80211W \
        IEEE8021X_EAPOL \
        MAIN=main \
        OS=unix \
        PEERKEY \
        PKCS12 \
        READLINE \
        SUITEB \
        TDLS

    option dbus     && config_enable CTRL_IFACE_DBUS{,_NEW,_INTRO}
    option pcap     && config_enable L2_PACKET=pcap ||
                       config_enable L2_PACKET=linux

    # EAP_AKA, EAP_AKA_PRIME, and EAP_SIM require PCSC. USIM_SIMULATOR is used
    # by EAP_AKA.
    if option pcsc ; then
        config_enable \
            PCSC \
            USIM_SIMULATOR

        config_enable_eap \
            AKA \
            AKA_PRIME \
            SIM
    fi

#    if option build_options:recommended_tests ; then
#        config_enable \
#            CLIENT_MLME \
#            EAPOL_TEST
#    fi

    # EAP_FAST requires EAP_TLS (which is always enabled), and only works with
    # OpenSSL-0.9.9 (or internal TLS implementation)
    # MESH/SAE/SUITEB192 require OpenSSL
    if option providers:gnutls; then
        config_enable \
            TLS=gnutls \
            GNUTLS_EXTRA
    else
        config_enable \
            TLS=openssl \
            SMARTCARD \
            SUITEB192
        option eap-fast && config_enable_eap FAST
        option nl80211 && config_enable MESH && \
            config_enable SAE
    fi

    config_enable_driver \
        ATMEL \
        HOSTAP \
        RALINK \
        ROBOSWITCH \
        WEXT \
        WIRED

    option nl80211 && config_enable_driver NL80211 && \
        config_enable LIBNL32

    # EAP_PEAP, EAP_TLS, and EAP_TTLS require TLS (which is always enabled)
    config_enable_eap \
        EKE \
        EXE \
        GPSK \
        GPSK_SHA256 \
        GTC \
        IKEV2 \
        LEAP \
        MD5 \
        MSCHAPV2 \
        OTP \
        PAX \
        PEAP \
        PSK \
        SAKE \
        TLS \
        TTLS

    # EAP Re-Authentication Protocol (ERP)
    config_enable ERP

    # Enabling this is a PITA, especially for the user. For details see the
    # file 'wpa_supplicant/defconfig' in the source.
    #config_enable DYNAMIC_EAP_METHODS

    # Enable privilege separation (see README)
    #config_enable PRIVSEP

    # Enable mitigation against certain attacks against TKIP by delaying
    # Michael MIC error reports by a random amount of time between 0 and 60
    # seconds.
    #config_enable DELAYED_MIC_ERROR_REPORT

    # Background scanning
    config_enable BGSCAN_LEARN
    config_enable BGSCAN_SIMPLE

    # IEEE 802.11u Interworking and Wi-Fi Hotspot 2.0
    config_enable HS20
    config_enable INTERWORKING

    # WPS
    config_enable WPS
    config_enable WPS_ER
    config_enable WPS_UPNP
    config_enable WPS_NFC

    # P2P (Wi-Fi Direct)
    config_enable P2P
    config_enable WIFI_DISPLAY

    if option qt5 ; then
        edo pushd wpa_gui-qt4
        qmake_src_configure
        edo popd
    fi
}

wpa_supplicant_src_compile() {
    default

    if option qt5 ; then
        edo pushd wpa_gui-qt4
        edo lrelease-qt5 lang/wpa_gui_*.ts
        emake
        edo popd
    fi

    ever is_scm && emake -C doc/docbook man
}

#src_test() {
#    emake tests
#}

wpa_supplicant_src_install() {
    dobin wpa_cli wpa_passphrase wpa_supplicant

    if option dbus ; then
        pushd dbus

        insinto /etc/dbus-1/system.d/
        newins {dbus-,}wpa_supplicant.conf

        # Will probably need to be moved to session services if privilege separation is implemented
        insinto /usr/share/dbus-1/system-services/
        doins 'fi.epitest.hostap.WPASupplicant.service'
        doins 'fi.w1.wpa_supplicant1.service'

        popd
    fi

    if option qt5 ; then
        edo pushd wpa_gui-qt4

        dobin wpa_gui

        insinto /usr/share/wpa_gui/translations
        doins lang/*.qm

        insinto /usr/share/applications
        doins wpa_gui.desktop

        insinto /usr/share/icons/hicolor/scalable/apps
        doins icons/wpa_gui.svg

        edo popd
    fi

    insinto "${SYSTEMDSYSTEMUNITDIR}"
    doins "${WORK}"/systemd/{wpa_supplicant@,wpa_supplicant-nl80211@,wpa_supplicant-wired@}.service
    option dbus && doins "${WORK}"/systemd/wpa_supplicant.service

    emagicdocs
    doman doc/docbook/*.{5,8}

    # PRIVILEGE SEPARATION
#    dosbin wpa_priv

    # also require the following
    # user/${PN}
    # group/${PN}
    # group/wpa_priv

#    local defaultdriver=wext
#    option nl80211 && defaultdriver=nl80211

#    if option nl80211 ; then
#        edo echo WPA_PRIV_DEFAULT_DRIVER=nl80211 >> "${IMAGE}"/etc/conf.d/wpa_priv
#    else
#        edo echo WPA_PRIV_DEFAULT_DRIVER=wext >> "${IMAGE}"/etc/conf.d/wpa_priv
#    fi
}

pkg_postinst() {
    option qt5 && gtk-icon-cache_pkg_postinst

#    elog "In order to use a control interface group with wpa_supplicant"
#    elog "Please add the system-wide wpa_supplicant user to that group:"
#    elog " usermod -a -G <control_interface_group> wpa_supplicant"
}

pkg_postrm() {
    option qt5 && gtk-icon-cache_pkg_postrm
}

