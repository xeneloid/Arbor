# Copyright 2012 Â© Saleem Abdulrasool <compnerd@compnerd.org>
# Distributed under the terms of the GNU General Public License v2

require gnu [ suffix=tar.bz2 subdir=${PNV} ]
require alternatives flag-o-matic
require toolchain-runtime-libraries

SUMMARY="The GNU Compiler Collection - free and open compilers for C, C++, Obj-C, and more."
HOMEPAGE="https://gcc.gnu.org/"

if [[ ${PV} == *_pre* ]] ; then
    DOWNLOADS="ftp://gcc.gnu.org/pub/gcc/snapshots/$(ever major)-${PV##*_pre}/gcc-$(ever major)-${PV//*_pre}.tar.bz2"
elif [[ ${PV} == *_rc* ]] ; then
    DOWNLOADS="ftp://gcc.gnu.org/pub/gcc/snapshots/$(ever major)-RC-${PV##*_rc}/gcc-${PV%_rc*}-RC-${PV##*_rc}.tar.bz2"
fi

LICENCES="GPL-2"


# See https://gcc.gnu.org/develop.html#num_scheme for the logic about versioning
# in short: x.x.0 is experimental, x.x.1 is pre-release, x.1.0 is release
# because this needed to be complicated further..
# From now on, just use the major version as the slot. This matches with how upstream does maintainence releases.

# TODO(compnerd) drop the 5.x -> 5.1 mapping for the SLOT when 5.x is removed.
# TODO(compnerd) drop the old slotting when gcc 4.x is removed
if ever at_least 6.0 ; then
    SLOT="$(ever major)"
elif ever at_least 5.0 ; then
    SLOT=5.1
else
    SLOT="$(ever range 1-2)"
fi

# Update the multiarch patch when adding a target
CROSS_COMPILE_TARGETS="
    aarch64-unknown-linux-gnueabi
    aarch64-unknown-linux-musleabi
    armv4-unknown-linux-gnueabi
    armv4-unknown-linux-gnueabihf
    armv4-unknown-linux-musleabi
    armv4-unknown-linux-musleabihf
    armv5-unknown-linux-gnueabi
    armv5-unknown-linux-gnueabihf
    armv5-unknown-linux-musleabi
    armv5-unknown-linux-musleabihf
    armv6-unknown-linux-gnueabi
    armv6-unknown-linux-gnueabihf
    armv6-unknown-linux-musleabi
    armv6-unknown-linux-musleabihf
    armv7-unknown-linux-gnueabi
    armv7-unknown-linux-gnueabihf
    armv7-unknown-linux-musleabi
    armv7-unknown-linux-musleabihf
    i686-pc-linux-gnu
    i686-pc-linux-musl
    powerpc64-unknown-linux-gnu
    x86_64-pc-linux-gnu
    x86_64-pc-linux-musl
"

if ever at_least 6.0 ; then
    CROSS_COMPILE_TARGETS+="
        ia64-unknown-linux-gnu
    "
fi

MYOPTIONS="
    ( targets: ${CROSS_COMPILE_TARGETS} ) [[ number-selected = at-least-one ]]
    graphite [[ description = [ enable support for Graphite based loop optimizations ] ]]
    threads  [[ description = [ build with threading support; requires target libc ] ]]
"

DEPENDENCIES="
    build+run:
        threads? (
            dev-libs/gmp:=[>=4.2]
            dev-libs/mpc:=[>=0.8.1]
            dev-libs/mpfr:=[>=2.4.0]
            sys-libs/zlib
        )
        !sys-devel/static-gcc [[
            description = [ static-gcc was moved back to gcc. ]
            resolution = uninstall-blocked-after
        ]]
    run:
        sys-devel/binutils[targets:*(-)?]
        !dev-lang/clang[<3.6.1-r5] [[
            description = [ Alternatives conflict ]
            resolution = uninstall-blocked-after
        ]]
    post:
        sys-libs/libstdc++:${SLOT}[~${PV}]
        app-admin/eclectic-gcc[targets:*(-)?]
"
#   build:
#       $(for host in ${CROSS_COMPILE_TARGETS} ; do
#           echo hosts:${host}? ( sys-devel/binutils[targets:${host}] )
#         done)
#   buil+run:
#       sys-libs/glibc[hosts:*(-)?]

if ever at_least 6.0 ; then
    DEPENDENCIES+="
        build+run:
            graphite? ( dev-libs/isl:=[>=0.15] )
    "
elif ever at_least 5.1.0 ; then
    DEPENDENCIES+="
        build+run:
            graphite? ( dev-libs/isl:=[>=0.12] )
    "
else
    DEPENDENCIES+="
        build+run:
            graphite? (
                dev-libs/cloog:=[>=0.17&<0.19]
                dev-libs/isl:=[>=0.10&<0.13]
            )
    "
fi

if [[ ${PV} == *_pre* ]] ; then
    ECONF_SOURCE="${WORKBASE}/gcc-$(ever major)-${PV##*_pre}"
else
    ECONF_SOURCE="${WORKBASE}/gcc-${PV/_p?(re)/-}"
fi
WORK=${ECONF_SOURCE}

gcc_pkg_setup() {
    local target=

    for target in ${CROSS_COMPILE_TARGETS} ; do
        # NOTE(compnerd) ensure that CFLAGS_FOR_TARGET are specified by the user as otherwise the
        # generated target components will be invalid as they will be compiled with CFLAGS for the
        # host.
        if option targets:${target} ; then
            [[ -n "$(print-flags ${target} CFLAGS)" ]]  || die "CFLAGS for ${target} are not set"
        fi
    done

    # These flags are used with the build compiler as well as the host
    # compiler and therefore cannot contain arch specific flags
    unset CPPFLAGS CFLAGS CXXFLAGS
}

gcc_src_prepare() {
    edo sed -i -e '/AR = ar/cAR := \$(AR)' libcpp/Makefile.in
    edo sed -i -e 's@\./fixinc\.sh@-c true@' gcc/Makefile.in
    default
}

gcc_src_configure() {
    local build=$(exhost --build) host=$(exhost --target) target=

    for target in ${CROSS_COMPILE_TARGETS} ; do
        local gxx_incdir=/usr/${target}/include/c++/${PV%%_p*}

        if option !targets:${target} ; then
            echo "    Cross-Compile Target: ${target} (disabled)"
            continue
        fi

        echo "    Cross-Compile Target: ${target}"

        edo mkdir -p "${WORKBASE}/build/${target}"
        edo cd "${WORKBASE}/build/${target}"

        edo env                                                     \
            AR=${build}-ar                                          \
            RANLIB=${build}-ranlib                                  \
            AR_FOR_TARGET=${target}-ar                              \
            AS_FOR_TARGET=${target}-as                              \
            CPP_FOR_TARGET=${target}-cpp                            \
            READELF_FOR_TARGET=${target}-readelf                    \
            NM_FOR_TARGET=${target}-nm                              \
            OBJDUMP_FOR_TARGET=${target}-objdump                    \
            CFLAGS_FOR_TARGET="$(print-flags ${target} CFLAGS)"     \
            CPPFLAGS_FOR_TARGET="$(print-flags ${target} CPPFLAGS)" \
            CXXFLAGS_FOR_TARGET="$(print-flags ${target} CXXFLAGS)" \
            LDFLAGS_FOR_TARGET="$(print-flags ${target} LDFLAGS)"   \
            CC_FOR_BUILD=${build}-cc                                \
            CXX_FOR_BUILD=${build}-c++                              \
            AR_FOR_BUILD=${build}-ar                                \
            RANLIB_FOR_BUILD=${build}-ranlib                        \
            CFLAGS_FOR_BUILD="$(print-build-flags CFLAGS)"          \
            CPPFLAGS_FOR_BUILD="$(print-build-flags CPPFLAGS)"      \
            CXXFLAGS_FOR_BUILD="$(print-build-flags CXXFLAGS)"      \
            LDFLAGS_FOR_BUILD="$(print-build-flags LDFLAGS)"        \
        "${ECONF_SOURCE}/configure"                                 \
                --build=${build}                                    \
                --host=${host}                                      \
                --target=${target}                                  \
                --prefix=/usr/${host}                               \
                --datarootdir=/usr/share                            \
                --localstatedir=/var                                \
                --sysconfdir=/etc                                   \
                --disable-dependency-tracking                       \
                --enable-fast-install                               \
                --enable-serial-configure                           \
                --disable-bootstrap                                 \
                --disable-decimal-float                             \
                --disable-install-libiberty                         \
                --disable-libada                                    \
                --disable-libatomic                                 \
                --disable-libcilkrts                                \
                --disable-libffi                                    \
                --disable-libgfortran                               \
                --disable-libgo                                     \
                --disable-libgomp                                   \
                --disable-libitm                                    \
                --disable-libjava                                   \
                $(if ! ever at_least 4.9 ; then
                    echo --disable-libmudflap
                  fi)                                               \
                $(if ever at_least 5.0 ; then
                    echo --disable-libmpx
                  fi)                                               \
                --disable-libobjc                                   \
                $(if ever at_least 5.0 ; then
                    echo --disable-liboffloadmic
                  fi)                                               \
                --disable-libquadmath                               \
                --disable-libsanitizer                              \
                --disable-libssp                                    \
                --disable-libstdcxx                                 \
                --disable-libstdc++-v3                              \
                --disable-libvtv                                    \
                --disable-vtable-verify                             \
                --disable-multilib                                  \
                --disable-nls                                       \
                --disable-shared                                    \
                --enable-lto                                        \
                --enable-plugin                                     \
                --enable-plugins                                    \
                $(option_enable threads)                            \
                --enable-languages=c,c++,fortran,objc,obj-c++       \
                --with-sysroot='""'                                 \
                --with-gxx-include-dir="${gxx_incdir}"              \
                $(if ever at_least 5.1 ; then
                    option_with graphite isl
                  else
                    option_with graphite cloog
                  fi)                                               \
                $(optionq threads || echo --with-newlib)            \
                $(optionq threads || echo --without-headers)        \
                $(if [[ ${target} == ${host} ]] ; then
                    echo --program-transform="s,$,-${SLOT},"
                  else
                    echo --program-transform="s,^,${target}-,;s,$,-${SLOT},"
                  fi)                                               \
                --with-lib-path=/usr/${target}/lib                  \
                --with-as=/usr/${CHOST}/bin/${target}-as            \
                --with-ld=/usr/${CHOST}/bin/${target}-ld            \
                --with-system-zlib                                  \
                $(if [[ ${target} == armv7* ]] ; then
                        # TODO(compnerd) use the variant agnostic architecture by default
                        echo --with-arch=armv7-a
                  fi)                                               \
                $(if [[ ${target} == arm*-*-*-*hf ]] ; then
                    echo --with-float=hard
                  fi)                                               \
                --with-glibc-version=2.11                           \
                --enable-linker-build-id                            \
                --with-multilib-list=
    done
}

gcc_src_compile() {
    local target=

    for target in ${CROSS_COMPILE_TARGETS} ; do
        if option !targets:${target} ; then
            echo "    Cross-Compile Target: ${target} (disabled)"
            continue
        fi

        echo "    Cross-Compile Target: ${target}"

        edo cd "${WORKBASE}/build/${target}"

        # NOTE(compnerd) unset CPP which is set by default by ebuild.bash.  We want to auto-detect
        # the C preprocessor so that the cross-compiled configuration is properly detected and can
        # honour the target specific flags.
        unset CPP

        AR_FOR_TARGET=${target}-ar                              \
        READELF_FOR_TARGET=${target}-readelf                    \
        CFLAGS_FOR_TARGET="$(print-flags ${target} CFLAGS)"     \
        CPPFLAGS_FOR_TARGET="$(print-flags ${target} CPPFLAGS)" \
        CXXFLAGS_FOR_TARGET="$(print-flags ${target} CXXFLAGS)" \
        LDFLAGS_FOR_TARGET="$(print-flags ${target} LDFLAGS)"   \
        CFLAGS_FOR_BUILD="$(print-build-flags CFLAGS)"          \
        CPPFLAGS_FOR_BUILD="$(print-build-flags CPPFLAGS)"      \
        CXXFLAGS_FOR_BUILD="$(print-build-flags CXXFLAGS)"      \
        LDFLAGS_FOR_BUILD="$(print-build-flags LDFLAGS)"        \
            default
    done
}

gcc_src_install() {
    local host=$(exhost --target) target=
    local alternatives=()

    for target in ${CROSS_COMPILE_TARGETS} ; do
        if option !targets:${target} ; then
            echo "    Cross-Compile Target: ${target} (disabled)"
            continue
        fi

        echo "    Cross-Compile Target: ${target}"

        edo cd "${WORKBASE}/build/${target}"
        emake -j1 DESTDIR="${IMAGE}" install

        edo pushd "${IMAGE}"

        # c++ is provided by eclectic-gcc
        nonfatal edo rm usr/${host}/bin/{,${target}-}c++-${SLOT}
        nonfatal edo rm usr/share/man/man1/{,${target}-}c++-${SLOT}.1

        edo rm usr/${host}/bin/${target}-gcc-${PV%%_p*}

        if [[ ${target} == ${host} ]] ; then
            # TODO(compnerd) tweak build to automatically name these tools properly
            for tool in cpp-${SLOT} gcov-${SLOT} gcov-tool-${SLOT} ; do
                if [[ -e usr/${host}/bin/${tool} ]]; then
                    edo mv usr/${host}/bin/{,${target}-}${tool}
                fi
                nonfatal edo mv usr/share/man/man1/{,${target}-}${tool}.1
            done
            for tool in g++-${SLOT} gcc-${SLOT} gcc-ar-${SLOT} gcc-nm-${SLOT} gcc-ranlib-${SLOT} gfortran-${SLOT} ; do
                edo rm usr/${host}/bin/${tool}
                nonfatal edo mv usr/share/man/man1/{,${target}-}${tool}.1
            done
        fi


        local unset_nullglob=
        shopt -q nullglob || unset_nullglob=1
        shopt -s nullglob

        # allow for C pre-preprocessor alternatives to be set correctly
        edo pushd usr/${host}/bin
        edo mv ${target}-cpp-${SLOT} ${target}-gcc-cpp-${SLOT}
        nonfatal edo rm ${target}-cpp
        edo popd
        edo pushd usr/share/man/man1
        edo mv ${target}-cpp-${SLOT}.1 ${target}-gcc-cpp-${SLOT}.1
        nonfatal edo rm ${target}-cpp.1
        edo popd

        for tool in usr/${host}/bin/${target}-*-${SLOT}; do
            alternatives+=( /${tool%-${SLOT}} ${tool##*/} )
        done

        for man in usr/share/man/man*/*.*; do
            local ext=${man##*.}
            # some are already slotted due to --program-suffix, some aren't
            [[ ${man} =~ -${SLOT}.${ext}$ ]] && man=${man%-${SLOT}.${ext}}.${ext}
            local name=${man##*/}
            alternatives+=( /${man} ${name%.${ext}}-${SLOT}.${ext} )
        done
        for info in usr/share/info/*.info; do
            # some are already slotted due to --program-suffix, some aren't
            [[ ${info} =~ -${SLOT}.info$ ]] && info=${info%-${SLOT}.info}.info
            local name=${info##*/}
            alternatives+=( /${info} ${name%.info}-${SLOT}.info )
        done
        for locale in usr/share/locale/*/*/*.mo; do
            [[ -e ${locale} ]] || continue
            local name=${locale##*/}
            alternatives+=( /${locale} ${name%.mo}-${SLOT}.mo )
        done

        [[ -n ${unset_nullglob} ]] && shopt -u nullglob

        edo popd
    done

    edo pushd "${IMAGE}"
    for tool in usr/${host}/bin/${host}-*-${SLOT}; do
        [[ ${tool} =~ ^.*/${host}-(.*)-${SLOT}$ ]] && local name=${BASH_REMATCH[1]}
        dosym ${host}-${name}-${SLOT} /usr/${host}/bin/${name}-${SLOT}
        dobanned ${name}-${SLOT}
        alternatives+=(
            "${BANNEDDIR}"/${name}       ${name}-${SLOT}
            /usr/${host}/bin/${name}     ${name}-${SLOT}
        )
        if [[ -e usr/share/man/man1/${host}-${name}-${SLOT}.1 ]]; then
            dosym ${host}-${name}-${SLOT}.1 /usr/share/man/man1/${name}-${SLOT}.1
            alternatives+=( /usr/share/man/man1/${name}.1  ${name}-${SLOT}.1 )
        fi
    done
    edo popd

    # slot libcc1 with alternatives-light. Has to be handled specifically because it's
    # in "lib" and not "lib/<target>/<gcc version>"
    symlink_dynamic_libs libcc1
    slot_dynamic_libs libcc1

    alternatives_for gcc ${SLOT} ${SLOT} "${alternatives[@]}"

    edo find "${IMAGE}" -depth -type d -empty -delete
}

gcc_pkg_postinst() {
    # make sure libcc1.so.0.0.0 gets replaced with the alternative
    if ever at_least 5.1; then
        libcc1=usr/$(exhost --target)/lib/libcc1.so.0.0.0
        if [[ -f ${ROOT}${libcc1} && ! -L ${ROOT}${libcc1} ]]; then
            edo rm "${ROOT}${libcc1}"
        fi
    fi

    alternatives_pkg_postinst

    # gcc erroneously installed ${target}-c++ in [<=4.9.2-r12] [<=5.3.0-r2] and [<=6.0.0_pre20160207-r1]
    # which wil vanish when updating it. Regenerate the symlink with the alternative from eclectic-gcc
    if ! nonfatal edo eclectic alternatives update c++; then
        exlogfailure
        eerror 'failed to update c++ alternative. Run "eclectic alternatives update c++" manually'
    fi
}

export_exlib_phases pkg_setup src_prepare src_configure src_compile src_install pkg_postinst

