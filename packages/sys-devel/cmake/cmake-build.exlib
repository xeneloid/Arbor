# Copyright 2008 Wulf Krueger <philantrop@exherbo.org>
# Copyright 2008, 2009, 2010 Ingmar Vanhassel <ingmar@exherbo.org>
# Copyright 2014-2015 Heiko Becker <heirecka@exherbo.org>
# Distributed under the terms of the GNU General Public License v2
# Based in part upon 'cmake-2.6.0.ebuild' from Gentoo, which is:
#     Copyright 1999-2008 Gentoo Foundation.

require bash-completion elisp-optional [ source_directory=Auxiliary ] flag-o-matic
require freedesktop-desktop freedesktop-mime gtk-icon-cache

export_exlib_phases src_prepare src_configure src_compile src_test src_install \
                    pkg_postinst pkg_postrm

SUMMARY="Cross platform Make"
HOMEPAGE="https://www.cmake.org"
DOWNLOADS="${HOMEPAGE}/files/v$(ever range 1-2)/${PNV}.tar.gz"

REMOTE_IDS="freecode:${PN}"

LICENCES="
    BSD-3
    qt4? ( LGPL-2.1 )
    qt5? ( LGPL-3 )
"
SLOT="0"
MYOPTIONS="
    doc
    bootstrap [[ description = [ Use the internal jsoncpp (it needs cmake to build itself) ] ]]
    qt4
    qt5       [[ description = [ Build against Qt5 instead of Qt4. ] ]]
    vim-syntax

    ( qt4 qt5 )  [[ number-selected = at-most-one ]]
"

DEPENDENCIES="
    build:
        doc? ( dev-python/Sphinx[>=1.2.2][python_abis:2.7] )
    build+run:
        app-arch/bzip2
        app-arch/libarchive[>=3.0.0]
        app-arch/xz
        dev-libs/expat[>=2.0.1]
        net-misc/curl[>=7.16.4][ssl(+)]
        sys-libs/ncurses
        !bootstrap? ( dev-libs/jsoncpp:=[>=0.15.5] )
        qt4? ( x11-libs/qt:4 )
        qt5? ( x11-libs/qtbase:5 )
"
# TODO: Versions >= 3.5.0 bundle KWIML (Kitware Information Macro Library,
# https://github.com/Kitware/KWIML ). It's currently not used elsewhere,
# handled a bit differently than other bundled dependencies and, most
# importantly, there's no released tarball. So for now we stick with the
# bundled version.

if ever at_least 3.7.0 ; then
    DEPENDENCIES+="
        build+run:
            dev-libs/libuv[>=1.0.0]
    "
fi

BASH_COMPLETIONS=(
    Auxiliary/bash-completion/cmake
    'Auxiliary/bash-completion/cpack cpack'
    'Auxiliary/bash-completion/ctest ctest'
)

# TODO: Tests are broken because of the multiarch migration. One problem is,
# that we probably need to figure out a way to pass our arch prefixed tools to
# the relevant tests. Additionally cmake isn't really verbose about what's
# wrong. So better disable them for now until someone finds time to fix them
# (heirecka).
RESTRICT="test"

VIMFILE="${PN}.vim"

DEFAULT_SRC_PREPARE_PATCHES+=(
    "${FILES}"/${PN}-remove-test-failure-submits-via-network2.patch
    "${FILES}"/${PN}-install-cmake.m4-to-usr-share-aclocal.patch
)
DEFAULT_SRC_TEST_PARAMS=( ARGS=--verbose )

cmake-build_src_prepare() {
    default

    if option qt4; then
        edo sed -i -e '/Icon/ s/\.png$//' Source/QtDialog/CMake.desktop
    fi
    # Don't install bash-completions, use bash-completion.exlib
    edo sed -e '/^install(FILES cmake cpack/d' \
            -i Auxiliary/bash-completion/CMakeLists.txt

    # Does only work with python2, errors out because of "except UnicodeError, error"
    edo sed -e "s/COMMAND \${SPHINX_EXECUTABLE}/COMMAND python2 \${SPHINX_EXECUTABLE\}/" \
            -i Utilities/Sphinx/CMakeLists.txt
}

cmake-build_src_configure() {
    local host=$(exhost --target)

    # TODO(tridactyla): There are still some issues with cross-compiling to a non-native platform
    # related to generating documentation (it tries to run executables it just built).
    edo env                                                                     \
        CC="$(exhost --build)-cc"                                               \
        CXX="$(exhost --build)-c++"                                             \
        CFLAGS="$(print-build-flags CFLAGS)"                                    \
        CXXFLAGS="$(print-build-flags CXXFLAGS)"                                \
        LDFLAGS="$(print-build-flags LDFLAGS)"                                  \
    ./bootstrap                                                                 \
        --parallel=${EXJOBS:-1}                                                 \
        --$(option qt5 || option qt4 || echo "no-")qt-gui                       \
        $(ever at_least 3.7.0 && echo "--server")                               \
        --system-bzip2                                                          \
        --system-curl                                                           \
        --system-expat                                                          \
        --system-libarchive                                                     \
        --system-zlib                                                           \
        --prefix=/usr/${host}                                                   \
        --docdir=/../share/doc/${PNVR}                                          \
        --datadir=/../share/${PN}                                               \
        --mandir=/../share/man                                                  \
        --xdgdatadir=/../share                                                  \
        --verbose                                                               \
        $(option doc && echo "--sphinx-man")                                    \
        $(option bootstrap --no-system-jsoncpp --system-jsoncpp)                \
        --                                                                      \
        -DCMAKE_C_COMPILER:PATH="${CC}"                                         \
        -DCMAKE_CXX_COMPILER:PATH="${CXX}"                                      \
        -DCMAKE_C_FLAGS:STRING="${CFLAGS}"                                      \
        -DCMAKE_CXX_FLAGS:STRING="${CXXFLAGS}"                                  \
        -DCMAKE_AR:PATH="${AR}"                                                 \
        -DCMAKE_RANLIB:PATH="${RANLIB}"                                         \
        -DCMAKE_LIBRARY_PATH:STRING=/usr/${host}/lib                            \
        -DCMAKE_INCLUDE_PATH:STRING=/usr/${host}/include                        \
        -DCMAKE_C_IMPLICIT_INCLUDE_DIRECTORIES:PATH=/usr/$(exhost --target)/include \
        -DCMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES:PATH=/usr/$(exhost --target)/include \
        $(ever at_least 3.7.0 && echo "-DCMAKE_USE_SYSTEM_LIBUV:BOOL=TRUE")     \
        $(option qt4 && echo "-DCMAKE_DISABLE_FIND_PACKAGE_Qt5Core:BOOL=TRUE")  \
        $(ever at_least 3.7.0 && option qt4 && echo "-DCMake_GUI_DISTRIBUTE_WITH_Qt_LGPL=2.1") \
        $(ever at_least 3.7.0 && option qt5 && echo "-DCMake_GUI_DISTRIBUTE_WITH_Qt_LGPL=3")
}

cmake-build_src_compile() {
    default
    elisp-optional_src_compile
}

cmake-build_src_test() {
    edo bin/ctest -V -E "CTestTestFailedSubmit|Qt4And5AutomocReverse"
}

cmake-build_src_install() {
    default

    bash-completion_src_install
    elisp-optional_src_install

    if option vim-syntax; then
        insinto /usr/share/vim/vimfiles/syntax
        if ever at_least 3.7.0 ; then
            doins "${WORK}"/Auxiliary/vim/syntax/cmake.vim
        else
            doins "${WORK}"/Auxiliary/cmake-syntax.vim
        fi

        insinto /usr/share/vim/vimfiles/indent
        if ever at_least 3.7.0 ; then
            doins "${WORK}"/Auxiliary/vim/indent/cmake.vim
        else
            doins "${WORK}"/Auxiliary/cmake-indent.vim

            insinto /usr/share/vim/vimfiles/ftdetect
            doins "${FILES}/${VIMFILE}"
        fi
    fi
}

cmake-build_pkg_postinst() {
    if option qt4 || option qt5 ; then
        freedesktop-desktop_pkg_postinst
        freedesktop-mime_pkg_postinst
        gtk-icon-cache_pkg_postinst
    fi
}

cmake-build_pkg_postrm() {
    if option qt4 || option qt5 ; then
        freedesktop-desktop_pkg_postrm
        freedesktop-mime_pkg_postrm
        gtk-icon-cache_pkg_postrm
    fi
}

